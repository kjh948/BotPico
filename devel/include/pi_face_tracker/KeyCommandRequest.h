// Generated by gencpp from file pi_face_tracker/KeyCommandRequest.msg
// DO NOT EDIT!


#ifndef PI_FACE_TRACKER_MESSAGE_KEYCOMMANDREQUEST_H
#define PI_FACE_TRACKER_MESSAGE_KEYCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pi_face_tracker
{
template <class ContainerAllocator>
struct KeyCommandRequest_
{
  typedef KeyCommandRequest_<ContainerAllocator> Type;

  KeyCommandRequest_()
    : command()  {
    }
  KeyCommandRequest_(const ContainerAllocator& _alloc)
    : command(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct KeyCommandRequest_

typedef ::pi_face_tracker::KeyCommandRequest_<std::allocator<void> > KeyCommandRequest;

typedef boost::shared_ptr< ::pi_face_tracker::KeyCommandRequest > KeyCommandRequestPtr;
typedef boost::shared_ptr< ::pi_face_tracker::KeyCommandRequest const> KeyCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator1> & lhs, const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator1> & lhs, const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pi_face_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cba5e21e920a3a2b7b375cb65b64cdea";
  }

  static const char* value(const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcba5e21e920a3a2bULL;
  static const uint64_t static_value2 = 0x7b375cb65b64cdeaULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pi_face_tracker/KeyCommandRequest";
  }

  static const char* value(const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command\n"
;
  }

  static const char* value(const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pi_face_tracker::KeyCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PI_FACE_TRACKER_MESSAGE_KEYCOMMANDREQUEST_H
